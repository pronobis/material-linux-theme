#!/bin/sh

set -e

# ------------------------------------------------------------------------------
# Print usage
# ------------------------------------------------------------------------------
print_usage()
{
    echo "Usage:"
    echo "  install.sh <theme_name>"
    echo
    echo "Arguments:"
    echo "  <theme_name> - Name of the theme to install, e.g. dark."
}


# ------------------------------------------------------------------------------
# Create a safe link to a file and make backup if needed.
# Args:
#   $1 - Target
#   $2 - Link name
# ------------------------------------------------------------------------------
create_link()
{
    if [ -d "$2" ] && [ ! -L "$2" ]
    then # Do not overwrite existing folders
        echo "ERROR: A directory $2 already exists!"
        exit 1
    fi
    if [ -e "$2" ] || [ -h "$2" ]
    then # To prevent creation of a link on another link (e.g. link to folder)
        mv "$2" "$2.bak"
    fi
    ln -s "$1" "$2"
}


# ------------------------------------------------------------------------------
# Create a safe copy of a file and make backup if needed.
# Args:
#   $1 - From
#   $2 - To
# ------------------------------------------------------------------------------
create_copy()
{
    if [ -d "$2" ] && [ ! -L "$2" ]
    then # Do not overwrite existing folders
        echo "ERROR: A directory $2 already exists!"
        exit 1
    fi
    if [ -e "$2" ] || [ -h "$2" ]
    then # To prevent copying to a link
        mv "$2" "$2.bak"
    fi
    cp "$1" "$2"
}



# ------------------------------------------------------------------------------
# Install Midnight Commander theme
# ------------------------------------------------------------------------------
install_mc()
{
    echo "Installing Midnight Commander theme..."

    # Detect MC config location
    local config_dir=""
    if [ -d "$HOME/.config/mc" ]
    then
        # Newer mc tends to keep config in .config
        config_dir="$HOME/.config/mc"
        echo "-> Found MC configuration in $config_dir"
    elif [ -d "$HOME/.mc" ]
    then
         # Older style location
         config_dir="$HOME/.mc"
        echo "-> Found MC configuration in $config_dir"
    else
        # No config at all, we create one ourselves and link to both locations
        echo "-> No existing MC configuration found, creating new directories"
        config_dir="$HOME/.config/mc"
        mkdir -p "$HOME/.config/mc"
        ln -s "$HOME/.config/mc" "$HOME/.mc"
    fi

    # Create skins folder
    if [ ! -e "$config_dir/skins" ]
    then
        echo "-> Creating skins directory."
        mkdir "$config_dir/skins"
    fi

    # Copy the theme
    echo "-> Copying the theme file"
    create_copy "$THEME_DIR/mc/material.ini" "$config_dir/skins/material.ini"

    # Update mc configuration
    echo "-> Updating MC configuration"
    local tmp=""
    if [ -e "$config_dir/ini" ]
    then
        # Make backup
        cp "$config_dir/ini" "$config_dir/ini.bak"
        # Update
        if grep -q "skin" "$config_dir/ini"
        then
            # Config file exists and has skin entry, replace
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "/skin/c\\skin=$config_dir/skins/material.ini" "$config_dir/ini"); printf "%s\n" "$tmp" > "$config_dir/ini"
        else
            if grep -q "\[Midnight-Commander\]" "$config_dir/ini"
            then
                # Config files exists but has no skin entry and has [MC] entry
                # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
                tmp=$(sed "/Midnight-Commander/a\\skin=$config_dir/skins/material.ini" "$config_dir/ini"); printf "%s\n" "$tmp" > "$config_dir/ini"
            else
                # Config files exists but has no skin entry and no [MC] entry
                # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
                tmp=$(sed "1s:^:[Midnight-Commander]\nskin=$config_dir/skins/material.ini\n\n:" "$config_dir/ini"); printf "%s\n" "$tmp" > "$config_dir/ini"
            fi
        fi
    else
        # Config file does not exist, create and add only skin entry
        cat <<EOT >> "$config_dir/ini"

[Midnight-Commander]
skin=/home/czikus/.config/mc/skins/material.ini

EOT
    fi

    echo "Done!"
}


# ------------------------------------------------------------------------------
# Install i3 window manager theme
# ------------------------------------------------------------------------------
install_i3()
{
    echo "Installing i3 Window Manager theme..."

    # Check if configuration file exists
    if [ -e "$HOME/.i3/config" ]
    then
        echo "-> Found i3 configuration in $HOME/.i3/config"
        # Make backup
        cp "$HOME/.i3/config" "$HOME/.i3/config.bak"

        # Update
        echo "-> Updating i3 configuration"
        # Replace/add each window configuration line
        local i=""
        local tmp=""
        i=$(grep "^client.focused[ \t]" "$THEME_DIR/i3/config")
        if grep -q "^client.focused[ \t]" "$HOME/.i3/config"
        then  # Entry found
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "/^client.focused[ \t]/c\\$i" "$HOME/.i3/config"); printf "%s\n" "$tmp" > "$HOME/.i3/config"
        else  # Entry not found
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "1s/^/$i\n/" "$HOME/.i3/config"); printf "%s\n" "$tmp" > "$HOME/.i3/config"
        fi

        i=$(grep "^client.focused_inactive[ \t]" "$THEME_DIR/i3/config")
        if grep -q "^client.focused_inactive[ \t]" "$HOME/.i3/config"
        then  # Entry found
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "/^client.focused_inactive[ \t]/c\\$i" "$HOME/.i3/config"); printf "%s\n" "$tmp" > "$HOME/.i3/config"
        else  # Entry not found
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "1s/^/$i\n/" "$HOME/.i3/config"); printf "%s\n" "$tmp" > "$HOME/.i3/config"
        fi

        i=$(grep "^client.unfocused[ \t]" "$THEME_DIR/i3/config")
        if grep -q "^client.unfocused[ \t]" "$HOME/.i3/config"
        then  # Entry found
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "/^client.unfocused[ \t]/c\\$i" "$HOME/.i3/config"); printf "%s\n" "$tmp" > "$HOME/.i3/config"
        else  # Entry not found
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "1s/^/$i\n/" "$HOME/.i3/config"); printf "%s\n" "$tmp" > "$HOME/.i3/config"
        fi

        i=$(grep "^client.urgent[ \t]" "$THEME_DIR/i3/config")
        if grep -q "^client.urgent[ \t]" "$HOME/.i3/config"
        then  # Entry found
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "/^client.urgent[ \t]/c\\$i" "$HOME/.i3/config"); printf "%s\n" "$tmp" > "$HOME/.i3/config"
        else  # Entry not found
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "1s/^/$i\n/" "$HOME/.i3/config"); printf "%s\n" "$tmp" > "$HOME/.i3/config"
        fi

        # Replace/add bar color configuration
        # Get the new bar color config
        i=$(sed -n "/^[ \t]*colors[ \t]*{/,/}/p" "$THEME_DIR/i3/config")
        # Replace newlines with \n
        i=$(printf "%s" "$i" | awk 'BEGIN{ORS="\\n"}{print $0}')
        # Trim the last '\n' newline awk ads
        i=${i%??}
        # Check if there is a bar configuration
        if grep -q "^[ \t]*bar[ \t]*{" "$HOME/.i3/config"
        then
            if grep -q "^[ \t]*colors[ \t]*{" "$HOME/.i3/config"
            then # Colors configuration exists
                # Delete existing colors config
                # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
                tmp=$(sed "/^[ \t]*colors[ \t]*{/,/}/d" "$HOME/.i3/config"); printf "%s\n" "$tmp" > "$HOME/.i3/config"
            fi
            # Add the colors section to existing bar section
            # We use awk below instead of sed since sed has some weird problems with multiline strings on busybox
            tmp=$(awk "/^[ \t]*bar[ \t]*\{[ \t]*$/{print \$0 \"\\n$i\"; next}{print}" "$HOME/.i3/config"); printf "%s\n" "$tmp" > "$HOME/.i3/config"
        fi
    else
        # No config file, we use the theme as a stub
        echo "-> No existing i3 configuration found, using the theme as a stub"
        mkdir -p "$HOME/.i3"
        cp "$THEME_DIR/i3/config" "$HOME/.i3/config"
    fi

    echo "Done!"
}


# ------------------------------------------------------------------------------
# Install Emacs theme
# ------------------------------------------------------------------------------
install_emacs()
{
    echo "Installing Emacs theme..."
    mkdir -p "$HOME/.emacs.d/themes"
    create_copy "$THEME_DIR/emacs/material-theme.el" "$HOME/.emacs.d/themes/material-theme.el"
    create_copy "$THEME_DIR/emacs/smart-mode-line-material-theme.el" "$HOME/.emacs.d/themes/smart-mode-line-material-theme.el"
    echo "Done!"
    echo
    echo "To finish installation of the Emacs theme, add the following lines to"
    echo "your Emacs initialization files:"
    echo "  (add-to-list 'custom-theme-load-path \"$HOME/.emacs.d/themes\")"
    echo "  (load-theme 'material t)"
    echo "  (setq sml/theme 'material)"
}


# ------------------------------------------------------------------------------
# Install KDE 5.0
# ------------------------------------------------------------------------------
install_kde5()
{
    echo "Installing KDE 5.0 theme..."
    echo "-> Copying theme files"
    mkdir -p "$HOME/.local/share/color-schemes"
    create_copy "$THEME_DIR/kde5/colors" "$HOME/.local/share/color-schemes/Material.colors"
    mkdir -p "$HOME/.local/share/plasma/desktoptheme/material-breeze"
    create_copy "$THEME_DIR/kde5/breeze/colors" "$HOME/.local/share/plasma/desktoptheme/material-breeze/colors"
    create_copy "$THEME_DIR/kde5/breeze/metadata.desktop" "$HOME/.local/share/plasma/desktoptheme/material-breeze/metadata.desktop"
    # Delete cache created by plasma
    echo "-> Clearing Plasma 5 cache"
    rm -f $HOME/.cache/plasma-svgelements-material-breeze*
    rm -f $HOME/.cache/plasma_theme_material-breeze*
    if which kwriteconfig5 > /dev/null
    then
        echo "-> Updating Plasma 5 configuration"
        kwriteconfig5 --file "plasmarc" --group "Theme" --key "name" "material-breeze"
    fi
    echo "Done!"
    echo
    echo "To finish installation of the KDE theme, you need to select the"
    echo "Material color scheme and Material Breeze desktop theme in your"
    echo "KDE system settings."
}


# ------------------------------------------------------------------------------
# Install GTK
# ------------------------------------------------------------------------------
install_gtk()
{
    echo "Installing GTK theme..."

    # Copy the theme
    echo "-> Copying the theme files"
    rm -rf "$HOME/.local/share/themes/Material-Orion"
    mkdir -p "$HOME/.local/share/themes/Material-Orion"
    cp -r $THEME_DIR/gtk_orion/* "$HOME/.local/share/themes/Material-Orion/"

    echo "-> Updating GTK 2.0 configuration"
    if [ -e "$HOME/.gtkrc-2.0" ]
    then
        # Include
        if grep -q "include[ \t]*\".*themes.*\"" "$HOME/.gtkrc-2.0"
        then  # Entry found, replace
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "/include[ \t]*\".*themes.*\"/c\\include \"$HOME/.local/share/themes/Material-Orion/gtk-2.0/gtkrc\"" "$HOME/.gtkrc-2.0"); printf "%s\n" "$tmp" > "$HOME/.gtkrc-2.0"
        else  # Entry not found, prepend entry to the file
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "1s:^:include \"$HOME/.local/share/themes/Material-Orion/gtk-2.0/gtkrc\"\n:" "$HOME/.gtkrc-2.0"); printf "%s\n" "$tmp" > "$HOME/.gtkrc-2.0"
        fi
        # Theme setting
        if grep -q "gtk-theme-name" "$HOME/.gtkrc-2.0"
        then  # Entry found, replace
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "/gtk-theme-name/c\\gtk-theme-name=\"Material-Orion\"" "$HOME/.gtkrc-2.0"); printf "%s\n" "$tmp" > "$HOME/.gtkrc-2.0"
        else  # Entry not found, prepend entry to the file
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            echo "gtk-theme-name=\"Material-Orion\"" >> "$HOME/.gtkrc-2.0"
        fi
    else
        # Config file does not exist, create and add theme entry
        cat <<EOT > "$HOME/.gtkrc-2.0"
include "$HOME/.local/share/themes/Material-Orion/gtk-2.0/gtkrc"
gtk-theme-name="Material-Orion"
EOT
    fi

    echo "-> Updating GTK 3.0 configuration"
    if [ -e "$HOME/.config/gtk-3.0/settings.ini" ]
    then
        if grep -q "\[Settings\]" "$HOME/.config/gtk-3.0/settings.ini"
        then  # Settings group exists
            if grep -q "gtk-theme-name" "$HOME/.config/gtk-3.0/settings.ini"
            then  # gtk-theme-name entry exists, replace
                # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
                tmp=$(sed "/gtk-theme-name/c\\gtk-theme-name=Material-Orion" "$HOME/.config/gtk-3.0/settings.ini"); printf "%s\n" "$tmp" > "$HOME/.config/gtk-3.0/settings.ini"
            else  # gtk-theme-name entry does not exists, add to [Settings]
                # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
                tmp=$(sed "/\[Settings\]/a\\gtk-theme-name=Material-Orion" "$HOME/.config/gtk-3.0/settings.ini"); printf "%s\n" "$tmp" > "$HOME/.config/gtk-3.0/settings.ini"
            fi
        else  # Settings group does not exist, append it
            cat <<EOT >> "$HOME/.config/gtk-3.0/settings.ini"
[Settings]
gtk-theme-name=Material-Orion
EOT
        fi
    else
        cat <<EOT > "$HOME/.config/gtk-3.0/settings.ini"
[Settings]
gtk-theme-name=Material-Orion
EOT
    fi

    echo "Done!"
}


# ------------------------------------------------------------------------------
# Install XTerm
# ------------------------------------------------------------------------------
install_xterm()
{
    echo "Installing XTerm theme..."

    # Copy the theme
    echo "-> Copying the theme file"
    create_copy "$THEME_DIR/xterm/Xresources-xterm-colors" "$HOME/.Xresources-xterm-colors"

    # Update .Xresources
    echo "-> Adding include to $HOME/.Xresources"
    local tmp=""
    if [ -e "$HOME/.Xresources" ]
    then
        # Make backup
        cp "$HOME/.Xresources" "$HOME/.Xresources.bak"
        # Update
        if grep -q ".Xresources-xterm-colors" "$HOME/.Xresources"
        then
            # File exists and has include, replace
            # To preserve links, we do not use sed -i, we use printf since echo interprets \\ in some shells
            tmp=$(sed "/Xresources-xterm-colors/c\\#include \"$HOME/.Xresources-xterm-colors\"" "$HOME/.Xresources"); printf "%s\n" "$tmp" > "$HOME/.Xresources"
        else
            # File exists but has no include, append
            echo "#include \"$HOME/.Xresources-xterm-colors\"" >> "$HOME/.Xresources"
        fi
    else
        # File does not exist, create and add include
        echo "#include \"$HOME/.Xresources-xterm-colors\"" > "$HOME/.Xresources"
    fi

    # Load .Xresources
    echo "-> Loading .Xresources"
    if which xrdb > /dev/null
    then
        set +e
        DISPLAY=:0 xrdb -merge "$HOME/.Xresources"
        if [ $? -ne 0 ]
        then
            echo "---> Warning: Could not find display, .Xresources will not be loaded now."
        fi
        set -e
    else
        echo "---> Warning: xrdb not found, .Xresources will not be loaded now."
    fi
    echo "Done!"
}



# ------------------------------------------------------------------------------
# Main
# ------------------------------------------------------------------------------
# Parse args
theme_name=$1
if [ -z "$theme_name" ]
then
    print_usage
    exit 1
fi

# Get theme dir
THEME_DIR=$( cd "${0%/*}/out/$theme_name" && pwd )

# Install
install_kde5
echo
install_gtk
echo
install_xterm
echo
install_mc
echo
install_i3
echo
install_emacs
